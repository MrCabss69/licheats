## README.md
    - content: # Licheats - Lichess Data Retrieval and Analysis

## Resumen del Proyecto

**Licheats** es un sistema avanzado para la visualización y análisis de estadísticas de partidas de ajedrez, centrado especialmente en las aperturas. Este sistema no solo permite almacenar y gestionar información sobre partidas de ajedrez en una base de datos estructurada, sino que también proporciona herramientas analíticas para explorar estrategias de aperturas, evaluar el rendimiento de los jugadores y predecir resultados basados en el historial de juego.

### Objetivos del Proyecto

El objetivo principal del proyecto es desarrollar un sistema integral que permita:
- Analizar y visualizar estadísticas de partidas de ajedrez.
- Investigar las preferencias y efectividad de diferentes aperturas de ajedrez.
- Prever las mejores estrategias de apertura para enfrentamientos específicos entre jugadores.

### Preguntas Clave a Responder

El sistema está diseñado para responder a preguntas específicas relacionadas con el comportamiento y el rendimiento de los jugadores:
- ¿El jugador tiende a enrocarse? Si es así, ¿hacia qué lado prefiere?
- ¿El jugador tiene un mejor rendimiento con damas en el tablero o sin ellas?
- ¿Cuáles son las causas más comunes de las derrotas del jugador (tiempo, abandono, jaque mate)?
- ¿Cómo suele ganar el jugador sus partidas (por tiempo, por abandono del oponente, por jaque mate)?
- ¿El jugador tiene un mejor rendimiento con las piezas blancas o negras?
- ¿Cómo afecta la presión del tiempo al rendimiento del jugador?
- ¿Cuál es la preferencia del jugador respecto al ritmo de juego (rápidas, blitz, estándar)?


### Uso

```python
from licheats import Client
client = Client()

player = client.get_player('Fieber69')
player


games = client.get_games('Fieber69')
games

client.save_player(player)
client.save_games(games)
``````
## docs
## licheats
    - licheats/core/:
        - licheats/core/client.py/:
            ### Client
                - __init__: None
                - resume_stats: None
                - get_player: None
                - get_games: None
                - save_player: None
                - save_games: None
    - licheats/data/:
        - licheats/data/extract/:
            - licheats/data/extract/lichess_client.py/:
                ### LichessClient
                    - __init__: None
                    - get_games: Fetch games of a player from Lichess.
                    - get_profile: Fetch profile of a player from Lichess.
                    - get_player_stats: Fetch performance statistics of a player for all game types.
                    - get_cloud_evaluation: Get the cloud evaluation for a chess position.
        - licheats/data/load/:
            - licheats/data/load/db.py/:
                ### DatabaseManager
                    - __init__: None
                    - session_scope: Provide a transactional scope around a series of operations.
                    - save_player: None
                    - save_game: None
                    - get_player: None
                    - get_player_games: None
                    - delete_player: None
                    - close_session: Manually close the session if needed.
        - licheats/data/process/:
            - licheats/data/process/game_processor.py/:
                ### GameProcessor
                    - process: Process and store a game record from a dictionary into the ORM model.
            - licheats/data/process/player_processor.py/:
                ### PlayerProcessor
                    - process: Transforms Lichess API data into an ORM format.
    - licheats/services/:
        - licheats/services/api_service.py/:
            ### LichessApiService
              Docstring: Usa LichessClient para extraer datos de la API,
GameProcessor para transformar juegos en objetos Game,
y PlayerProcessor para transformar datos de jugador en objetos Player.
                - get_player: None
                - get_games: None
        - licheats/services/data_service.py/:
            ### DataService
                - __init__: None
                - get_player: None
                - get_player_games: None
                - save_player: None
                - save_games: None
        - licheats/services/stats_service.py/:
            ### StatService
                - resume_stats: None
    - licheats/shared/:
        - licheats/shared/constants.py/:
        - licheats/shared/models.py/:
            ### Player
                - to_dict: None
                - to_dataframe: Convert a list of Player instances to a pandas DataFrame. 
                - __repr__: None
                - __str__: None
            ### Game
                - to_dict: None
                - to_dataframe: Convert a list of Game instances to a pandas DataFrame. 
                - __repr__: None
                - __str__: None
        - licheats/shared/utils.py/:
            ### to_dict
            ### _format_date
            ### preprocess_player_games
            ### process_player_stats
        - licheats/shared/games_analizer.py/:
            ### GamesAnalyzer
                - __init__: None
                - is_player_white: None
                - enroque_preference: None
                - performance_with_queens: None
                - common_causes_of_defeat: None
                - game_wins: None
        - licheats/shared/statistics.py/:
            ### color_stats
## setup.py
## web-extension
    - web-extension/simple-chrome-extension-master/:
        - web-extension/simple-chrome-extension-master/README.md/:
            - content: # The Simplest Example of a Useful Chrome Browser Extension

Get data from the user's active tab, using minimal permissions to ensure shorter review-and-publish cycles.

## To test out this extension

1. Clone this repository to your local machine.
2. Visit `chrome://extensions` in your (Google Chrome) browser
3. Toggle 'Developer mode' on
4. Click 'Load Unpacked' and select the cloned directory (make sure it's unzipped if you downloaded it directly from this repo)
5. Open a new tab and click the extension's icon to open its popup & see it in action
